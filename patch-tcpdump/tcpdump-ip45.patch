diff --exclude autom4te.cache --exclude '*.o' --exclude 'config.*' --exclude Makefile --exclude 'Makefile-*' --exclude '*.orig' --exclude version.c --exclude tcpdump.1 --exclude tcpdump -rupN tcpdump/ip45.h tcpdump-ip45/ip45.h
--- tcpdump/ip45.h	1970-01-01 01:00:00.000000000 +0100
+++ tcpdump-ip45/ip45.h	2013-03-14 21:26:17.000000000 +0100
@@ -0,0 +1,105 @@
+/*
+*  IP45 - Extended IP protocol 
+*  Tomas Podermanski, tpoder@cis.vutbr.cz 
+*/
+
+#ifndef _NET_IP45_H
+#define _NET_IP45_H "2012-11-05 01"
+#endif
+
+#include <linux/types.h>
+#include <asm/byteorder.h>
+
+#ifndef IPPROTO_IP45_DEFINED
+enum {
+  IPPROTO_IP45 = 155,   /* IP 4.5  - IP45          */
+};
+#endif
+
+/* IP45 address structure */
+struct in45_addr
+{
+    union
+    {
+        __u8        u45_addr8[16];
+        __be16      u45_addr16[8];
+        __be32      u45_addr32[4];
+    } in45_u;
+#define s45_addr         in45_u.u45_addr8
+#define s45_addr16       in45_u.u45_addr16
+#define s45_addr32       in45_u.u45_addr32
+};
+
+/* IP45 header (standart IP header with no options + extra IP45 header */
+struct ip45hdr {
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u8	sver:4,					/* sub version, always set to 5 */
+			mver:4;					/* major version, always set to 4 */
+#elif defined (__BIG_ENDIAN_BITFIELD)
+	__u8	mver:4,
+ 			sver:4;	
+#else
+#error	"Please fix <asm/byteorder.h>"
+#endif
+	__u8	tos;	
+	__be16	tot_len;
+	__be16	id;
+	__be16	frag_off;
+	__u8	ttl;
+	__u8	protocol;	/* have to always be set to IPPROTO_IP45 */ 
+	__sum16	check1;
+	__be32	saddr;
+	__be32	daddr;
+	/* extended header for IP4.5 is presented here */
+	__u8	nexthdr;
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u8	flags:4,
+			dmark:4;
+#elif defined (__BIG_ENDIAN_BITFIELD)
+	__u8	dmark:4,
+	  		flags:4;				
+#else
+#error	"Please fix <asm/byteorder.h>"
+#endif
+	__sum16	check2;
+	struct in45_addr	s45addr;
+	struct in45_addr	d45addr;
+	__be64	sid;  
+	/* no IP options allowed in IP4.5 */
+};
+
+struct sockaddr_in45 {
+	sa_family_t			sin45_family;	/* Address family		*/
+	__be16				sin45_port;		/* Port number			*/
+	struct in45_addr	sin45_addr;
+
+};
+
+/* return the pointer to the begin of the IP address (find first non 0 octet)*/
+static inline void *ip45_addr_begin(const struct in45_addr *addr)
+{
+	__u8 *p;
+
+	for (p = (__u8 *)addr; p - (__u8*)addr < sizeof(struct in45_addr) - sizeof(__be32); p++) {
+		if ((__u8)*p != 0x0) break;
+	}
+	return p;
+}
+
+
+#ifdef __KERNEL__
+#include <linux/skbuff.h>
+
+static inline struct ip45hdr *ip45_hdr(const struct sk_buff *skb)
+{
+	return (struct ip45hdr *)skb_network_header(skb);
+}
+
+static inline int is_ip45(const struct sk_buff *skb)
+{
+	return (ip45_hdr(skb)->mver == 4 && \
+			ip45_hdr(skb)->sver == 5 && \
+			ip45_hdr(skb)->protocol == IPPROTO_IP45);
+}
+#endif
+
diff --exclude autom4te.cache --exclude '*.o' --exclude 'config.*' --exclude Makefile --exclude 'Makefile-*' --exclude '*.orig' --exclude version.c --exclude tcpdump.1 --exclude tcpdump -rupN tcpdump/ip.h tcpdump-ip45/ip.h
--- tcpdump/ip.h	2009-09-21 19:16:14.000000000 +0200
+++ tcpdump-ip45/ip.h	2013-03-14 21:26:17.000000000 +0100
@@ -64,6 +64,7 @@ struct ip {
 	struct	in_addr ip_src,ip_dst;	/* source and dest address */
 };
 
+
 #define	IP_MAXPACKET	65535		/* maximum packet size */
 
 /*
diff --exclude autom4te.cache --exclude '*.o' --exclude 'config.*' --exclude Makefile --exclude 'Makefile-*' --exclude '*.orig' --exclude version.c --exclude tcpdump.1 --exclude tcpdump -rupN tcpdump/ipproto.h tcpdump-ip45/ipproto.h
--- tcpdump/ipproto.h	2009-09-21 19:16:14.000000000 +0200
+++ tcpdump-ip45/ipproto.h	2013-03-14 21:26:17.000000000 +0100
@@ -142,3 +142,6 @@ extern struct tok ipproto_values[];
 #ifndef IPPROTO_MOBILITY
 #define IPPROTO_MOBILITY	135
 #endif
+#ifndef IPPROTO_IP45
+#define IPPROTO_IP45		155
+#endif
diff --exclude autom4te.cache --exclude '*.o' --exclude 'config.*' --exclude Makefile --exclude 'Makefile-*' --exclude '*.orig' --exclude version.c --exclude tcpdump.1 --exclude tcpdump -rupN tcpdump/Makefile.in tcpdump-ip45/Makefile.in
--- tcpdump/Makefile.in	2009-09-21 19:16:14.000000000 +0200
+++ tcpdump-ip45/Makefile.in	2013-03-14 21:26:17.000000000 +0100
@@ -75,6 +75,7 @@ CSRC =	addrtoname.c af.c checksum.c cpac
 	print-dccp.c print-decnet.c \
 	print-domain.c print-dtp.c print-dvmrp.c print-enc.c print-egp.c \
 	print-eap.c print-eigrp.c\
+	print-ip45.c \
 	print-esp.c print-ether.c print-fddi.c print-fr.c \
 	print-gre.c print-hsrp.c print-icmp.c print-igmp.c \
 	print-igrp.c print-ip.c print-ipcomp.c print-ipfc.c \
diff --exclude autom4te.cache --exclude '*.o' --exclude 'config.*' --exclude Makefile --exclude 'Makefile-*' --exclude '*.orig' --exclude version.c --exclude tcpdump.1 --exclude tcpdump -rupN tcpdump/print-ip45.c tcpdump-ip45/print-ip45.c
--- tcpdump/print-ip45.c	1970-01-01 01:00:00.000000000 +0100
+++ tcpdump-ip45/print-ip45.c	2013-04-08 23:32:37.891775362 +0200
@@ -0,0 +1,79 @@
+/*
+ * IP45 support for tcpdump 
+ */
+
+#ifndef lint
+static const char rcsid[] _U_ =
+    "@(#) $Header: /tcpdump/master/tcpdump/print-ip45.c,v 1.0 2012-11-05  $ (LBL)";
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <tcpdump-stdinc.h>
+
+#include <stdio.h>
+#include <string.h>
+
+#include "ip.h"
+#include "ip45.h"
+
+#include "interface.h"
+#include "addrtoname.h"
+#include "extract.h"
+
+char *
+inet45_ntoa(char *s, int len, unsigned char *addr) 
+{
+	char s2[70];	
+	char m[2];
+	int i = 0;
+	int addrlen = 4;
+
+	/* find first non zero octet */
+	for (i = 0; i < 16; i++) {
+		if (addr[i] != 0) { 
+			addrlen = i;
+			break;
+		}
+	}
+	
+	s[0] = '\0';
+	for (i = addrlen; i < 16; i++) {
+		if (i == 15 ) {
+			strcpy(m,"");
+
+		} else if (15 - i == len) {
+			strcpy(m,"^");
+		} else {
+			strcpy(m, ".");
+		}
+		sprintf(s2, "%d%s", addr[i] & 0xFF, m);
+		strcat(s, s2);
+	}	
+	return s;
+}
+
+int
+ip45_print(register const u_char *bp, int *nhdr _U_)
+{
+	register const struct ip45hdr *ip45 = (struct ip45hdr *)bp;
+	char d45addr[70], s45addr[70];
+
+	if (nhdr)
+		*nhdr = ip45->nexthdr;
+
+	inet45_ntoa(s45addr, 0, (char *)&ip45->s45addr);
+	inet45_ntoa(d45addr, ip45->dmark, (char *)&ip45->d45addr);
+
+	if (vflag)
+		printf(",sumlen=");
+
+	printf("[IP45 %s > %s SID:%016lx] ", s45addr, d45addr, (unsigned long)ip45->sid);
+
+	return sizeof(struct ip45hdr) - sizeof(struct ip);
+ trunc:
+	fputs("[|IP45]", stdout);
+	return -1;
+}
diff --exclude autom4te.cache --exclude '*.o' --exclude 'config.*' --exclude Makefile --exclude 'Makefile-*' --exclude '*.orig' --exclude version.c --exclude tcpdump.1 --exclude tcpdump -rupN tcpdump/print-ip.c tcpdump-ip45/print-ip.c
--- tcpdump/print-ip.c	2009-09-21 19:16:14.000000000 +0200
+++ tcpdump-ip45/print-ip.c	2013-03-14 21:26:17.000000000 +0100
@@ -380,6 +380,19 @@ ip_print_demux(netdissect_options *ndo,
 again:
 	switch (ipds->nh) {
 
+	case IPPROTO_IP45:
+	{
+		int enh; 
+		ipds->nh = *ipds->cp;
+		ipds->advance = ip45_print(ipds->ip, &enh);
+		if (ipds->advance <= 0)
+			break;
+		ipds->cp += ipds->advance;
+		ipds->len -= ipds->advance;
+		ipds->nh = enh & 0xff;
+		goto again;
+	}
+
 	case IPPROTO_AH:
 		ipds->nh = *ipds->cp;
 		ipds->advance = ah_print(ipds->cp);
@@ -679,7 +692,7 @@ ip_print(netdissect_options *ndo,
 
 		if (ipds->nh != IPPROTO_TCP && ipds->nh != IPPROTO_UDP &&
 		    ipds->nh != IPPROTO_SCTP && ipds->nh != IPPROTO_DCCP) {
-			(void)printf("%s > %s: ",
+			(void)printf("IP %s > %s: ",
 				     ipaddr_string(&ipds->ip->ip_src),
 				     ipaddr_string(&ipds->ip->ip_dst));
 		}
@@ -694,7 +707,7 @@ ip_print(netdissect_options *ndo,
 	     * and the protocol.
 	     */
 	    if (ipds->off & 0x1fff) {
-	        (void)printf("%s > %s:", ipaddr_string(&ipds->ip->ip_src),
+	        (void)printf("IP %s > %s:", ipaddr_string(&ipds->ip->ip_src),
 			     ipaddr_string(&ipds->ip->ip_dst));
 		if ((proto = getprotobynumber(ipds->ip->ip_p)) != NULL)
 		    (void)printf(" %s", proto->p_name);
